{
	"info": {
		"_postman_id": "3d1ac8ca-de96-4d94-a54c-9d010860f68e",
		"name": "HW_Part_3_Noskova_Alina",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29742796",
		"_collection_link": "https://www.postman.com/martian-crescent-269073/workspace/my-workspace/collection/29742796-3d1ac8ca-de96-4d94-a54c-9d010860f68e?action=share&source=collection_link&creator=29742796"
	},
	"item": [
		{
			"name": "E2E SCENARIOS",
			"item": [
				{
					"name": "S1 Admin manages categories",
					"item": [
						{
							"name": "Admin logs into the app using credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"AccessToken_admin\", responseJson.accessToken);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains the required field 'accessToken'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"accessToken is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify that the accessToken is stored in the collection variable 'AccessToken_admin'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"\r",
											"    pm.collectionVariables.set(\"AccessToken_admin\", responseData.accessToken);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify that accessToken is not null or undefined\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.exist.and.not.to.be.null.and.not.to.be.undefined;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"noskoava_lina\",\r\n  \"password\": \"StrongPassword123!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin gets the list of categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is an array with at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each element in the response array has the required fields - id and title\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(function (element) {\r",
											"        pm.expect(element).to.be.an('object');\r",
											"        pm.expect(element).to.have.property('id');\r",
											"        pm.expect(element).to.have.property('title');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category.id).to.be.a('number').and.to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_admin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin creates a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.collectionVariables.set(\"categoryId_1\", responseJson.id);\r",
											"pm.collectionVariables.set(\"title_category_1\", responseJson.title);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Title is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_admin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin changes category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate id field is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the title field is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title field should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate response body fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('id', 'title');\r",
											"});\r",
											"\r",
											"\r",
											"var responseData = pm.response.json();\r",
											"var title = responseData.title;\r",
											"pm.collectionVariables.set(\"title_category_1\", title);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_admin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{categoryId_1}}\",\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}} {{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin gets category by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const courseTitle = pm.collectionVariables.get(\"title_category_1\");\r",
											"\r",
											"pm.test(\"Title is as expected\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(courseTitle)\r",
											"    });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_admin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{categoryId_1}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{categoryId_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin removes category by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the 'result' field\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.have.property('result');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The error message is displayed correctly\", function () {\r",
											"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
											"     });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_admin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{categoryId_1}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{categoryId_1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S2 Teacher manages courses",
					"item": [
						{
							"name": "New user creates an account as a teacher",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Username_teacher\", pm.variables.replaceIn(\"{{$randomUserName}}\"));\r",
											"pm.collectionVariables.set(\"Password_teacher\", pm.variables.replaceIn(\"{{$randomPassword}}\"));\r",
											"pm.collectionVariables.set(\"FirstName_teacher\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
											"pm.collectionVariables.set(\"LastName_teacher\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
											"pm.collectionVariables.set(\"Email_teacher\", pm.variables.replaceIn(\"{{$randomEmail}}\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check, that status code is 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"const requestBody = JSON.parse(pm.request.body.raw);",
											"const responseJson = pm.response.json();",
											"",
											"// Check if the username in the request matches the username in the response",
											"pm.test(\"Username is the same in request and response\", function () {",
											"    pm.expect(requestBody.username).to.equal(responseJson.username);",
											"});",
											"",
											"// Check if the first name in the request matches the first name in the response",
											"pm.test(\"First Name is the same in request and response\", function () {",
											"    pm.expect(requestBody.firstName).to.equal(responseJson.firstName);",
											"});",
											"",
											"// Check if the last name in the request matches the last name in the response",
											"pm.test(\"Last Name is the same in request and response\", function () {",
											"    pm.expect(requestBody.lastName).to.equal(responseJson.lastName);",
											"});",
											"",
											"// Check if the email in the request matches the email in the response",
											"pm.test(\"Email is the same in request and response\", function () {",
											"    pm.expect(requestBody.email).to.equal(responseJson.email);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{Username_teacher}}\",\r\n    \"firstName\": \"{{FirstName_teacher}}\",\r\n    \"lastName\": \"{{LastName_teacher}}\",\r\n    \"email\": \"{{Email_teacher}}\",\r\n    \"password\": \"{{Password_teacher}}\",\r\n    \"role\": \"teacher\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher logs into the app using credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"AccessToken_teacher\", responseJson.accessToken);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required field - accessToken\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"accessToken is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify AccessToken_teacher collection variable\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"    pm.expect(pm.variables.get(\"AccessToken_teacher\")).to.equal(responseData.accessToken);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{Username_teacher}}\",\r\n  \"password\": \"{{Password_teacher}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher gets a list of available categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each object in the array has the required fields - id and title\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category).to.have.property('id');\r",
											"        pm.expect(category).to.have.property('title');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category.id).to.be.a('number');\r",
											"        pm.expect(category.id).to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate that the 'title' is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value is not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher creates a new course in the selected category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.collectionVariables.set(\"courseId_1\", responseJson.id);\r",
											"pm.collectionVariables.set(\"title_course_1\", responseJson.title);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Title is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Description is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
											"});\r",
											"\r",
											"pm.test(\"Category Id is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"title\": \"Bas{{$randomWord}}\",\r\n\"description\": \"Bas{{$randomWord}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher gets created courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Id is as expected\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const expectedData = pm.collectionVariables.get(\"courseId_1\");\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"    responseData.forEach(function(material) {\r",
											"        pm.expect(material.courseId).to.equal(expectedData);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/mine",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"mine"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher changes a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.test(\"Title is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Description is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{courseId_1}}\",\r\n  \"title\": \"{{$randomAlphaNumeric}}od {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"description\": \"{{$randomAlphaNumeric}}odifi {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{def_categoryId}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher creates course materials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"const requestBody = JSON.parse(pm.request.body.raw);",
											"",
											"pm.test(\"Title is the same in request and response\", function () {",
											"    pm.expect(requestBody.title).to.equal(responseJson.title);",
											"});",
											"",
											"pm.test(\"Data is the same in request and response\", function () {",
											"    pm.expect(requestBody.data).to.equal(responseJson.data);",
											"});",
											"",
											"",
											"pm.collectionVariables.set(\"title_course_1\", requestBody.title);",
											"pm.collectionVariables.set(\"data_course_1\", requestBody.data);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"title\": \"Int{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"data\": \"The prog{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"order\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId_1}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId_1}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher gets course materials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Title is as expected\", function () {",
											"    const responseData = pm.response.json();",
											"    const expectedTitle = pm.collectionVariables.get(\"title_course_1\");",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"    responseData.forEach(function(material) {",
											"        pm.expect(material.title).to.equal(expectedTitle);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Data is as expected\", function () {",
											"    const responseData = pm.response.json();",
											"    const expectedData = pm.collectionVariables.get(\"data_course_1\");",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"    responseData.forEach(function(material) {",
											"        pm.expect(material.data).to.equal(expectedData);",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId_1}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId_1}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teacher removes a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates successful deletion\", function () {\r",
											"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
											"     });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId_1}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId_1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S3 Student interacts with courses",
					"item": [
						{
							"name": "New user creates an account as a student",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Username_student\", pm.variables.replaceIn(\"{{$randomUserName}}\"));\r",
											"pm.collectionVariables.set(\"Password_student\", pm.variables.replaceIn(\"{{$randomPassword}}\"));\r",
											"pm.collectionVariables.set(\"FirstName_student\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
											"pm.collectionVariables.set(\"LastName_student\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
											"pm.collectionVariables.set(\"Email_student\", pm.variables.replaceIn(\"{{$randomEmail}}\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check, that status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Check if the username in the request matches the username in the response\r",
											"pm.test(\"Username is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.username).to.equal(responseJson.username);\r",
											"});\r",
											"\r",
											"// Check if the first name in the request matches the first name in the response\r",
											"pm.test(\"First Name is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.firstName).to.equal(responseJson.firstName);\r",
											"});\r",
											"\r",
											"// Check if the last name in the request matches the last name in the response\r",
											"pm.test(\"Last Name is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.lastName).to.equal(responseJson.lastName);\r",
											"});\r",
											"\r",
											"// Check if the email in the request matches the email in the response\r",
											"pm.test(\"Email is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.email).to.equal(responseJson.email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{Username_student}}\",\r\n    \"firstName\": \"{{FirstName_student}}\",\r\n    \"lastName\": \"{{LastName_student}}\",\r\n    \"email\": \"{{Email_student}}\",\r\n    \"password\": \"{{Password_student}}\",\r\n    \"role\": \"student\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student logs into the app using credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"AccessToken_student\", responseJson.accessToken);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required field - accessToken\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"accessToken is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify that the value of accessToken is stored in the collection variable 'AccessToken_student'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"\r",
											"    pm.collectionVariables.set(\"AccessToken_student\", responseData.accessToken);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{Username_student}}\",\r\n  \"password\": \"{{Password_student}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student receives a list of available courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains at least one course object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each course object has the required properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    responseData.forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('id');\r",
											"        pm.expect(course).to.have.property('title');\r",
											"        pm.expect(course).to.have.property('description');\r",
											"        pm.expect(course).to.have.property('visible');\r",
											"        pm.expect(course).to.have.property('categoryId');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student receives materials about the selected course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each material has a non-empty title\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    responseData.forEach(function (material) {\r",
											"        pm.expect(material.title).to.be.a('string').that.is.not.empty;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each material has non-empty data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    responseData.forEach(function (material) {\r",
											"        pm.expect(material.data).to.be.a('string').that.is.not.empty;\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify that the response contains course with expected title\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"\r",
											"    let materialFound = false;\r",
											"    responseData.forEach(function (material) {\r",
											"        if (material.title === \"Introductory part of the course\") {\r",
											"            materialFound = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(materialFound).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify that the response contains course with expected data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"\r",
											"    let materialFound = false;\r",
											"    responseData.forEach(function (material) {\r",
											"        if (material.data === \"The Python can be used for many interesting tasks.\") {\r",
											"            materialFound = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(materialFound).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{def_courseId}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{def_courseId}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student enrolls in the selected course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The result field is not empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.result).to.exist.and.to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response includes the correct enrollment message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.result).to.equal(\"You've successfully enrolled the course\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{def_courseId}}/enroll",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{def_courseId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student checks the list of courses he/she has enrolled in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains required fields - userId and courseId\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"\r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property('userId');\r",
											"        pm.expect(item).to.have.property('courseId');\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/mine",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"mine"
									]
								}
							},
							"response": []
						},
						{
							"name": "Student leaves the course for which she/he was enrolled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response includes the correct message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.result).to.equal(\"You've successfully left the course\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{def_courseId}}/leave",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{def_courseId}}",
										"leave"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ADMIN Endpoints testing",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Sign into the app (admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"AccessToken_admin\", responseJson.accessToken);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains the required field 'accessToken'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"accessToken is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify that the accessToken is stored in the collection variable 'AccessToken_admin'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"\r",
											"    pm.collectionVariables.set(\"AccessToken_admin\", responseData.accessToken);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify that accessToken is not null or undefined\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.exist.and.not.to.be.null.and.not.to.be.undefined;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"noskoava_lina\",\r\n  \"password\": \"StrongPassword123!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Creating a category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create a category (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"categoryId_1\", responseJson.id);\r",
															"pm.collectionVariables.set(\"title_category_1\", responseJson.title);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Checking that the category has been created",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Title is as expected\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    const expectedTitle = pm.collectionVariables.get(\"title_category_1\");\r",
															"    \r",
															"    pm.expect(responseData.title).to.equal(expectedTitle);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/{{categoryId_1}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"{{categoryId_1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with only EN alphabet and spaces in title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"Test_category_1\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has the required fields - id and title\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist;\r",
															"    pm.expect(responseData.title).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"id is a non-negative integer\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.id).to.be.a('number');\r",
															"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Title is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify that the category ID is stored in the collection variable 'Test_category_1'\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
															"\r",
															"    pm.collectionVariables.set(\"Test_category_1\", responseData.id.toString());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"Basic Machine course\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with only RU alphabet and spaces in title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"Test_category_2\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has the required fields - id and title\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist;\r",
															"    pm.expect(responseData.title).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"id is a non-negative integer\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.id).to.be.a('number');\r",
															"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Title is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify that the category ID is stored in the collection variable 'Test_category_2'\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
															"\r",
															"    pm.collectionVariables.set(\"Test_category_2\", responseData.id.toString());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"Машинное\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with only the upper case RU/EN alphabet in the title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"Test_category_3\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has the required fields - id and title\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist;\r",
															"    pm.expect(responseData.title).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"id is a non-negative integer\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.id).to.be.a('number');\r",
															"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Title is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify that the category ID is stored in the collection variable 'Test_category_3'\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
															"\r",
															"    pm.collectionVariables.set(\"Test_category_3\", responseData.id.toString());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAbbreviation}}{{$randomAbbreviation}}{{$randomAbbreviation}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with numbers in string format in title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"Test_category_4\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has the required fields - id and title\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist;\r",
															"    pm.expect(responseData.title).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"id is a non-negative integer\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.id).to.be.a('number');\r",
															"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Title is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify that the category ID is stored in the collection variable 'Test_category_4'\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
															"\r",
															"    pm.collectionVariables.set(\"Test_category_4\", responseData.id.toString());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with min allowed length title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"Test_category_5\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has the required fields - id and title\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist;\r",
															"    pm.expect(responseData.title).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"id is a non-negative integer\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.id).to.be.a('number');\r",
															"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Title is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify that the category ID is stored in the collection variable 'Test_category_5'\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
															"\r",
															"    pm.collectionVariables.set(\"Test_category_5\", responseData.id.toString());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"Mac\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with more than min allowed length title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"Test_category_6\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has the required fields - id and title\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist;\r",
															"    pm.expect(responseData.title).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"id is a non-negative integer\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.id).to.be.a('number');\r",
															"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Title is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify that the category ID is stored in the collection variable 'Test_category_6'\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
															"\r",
															"    pm.collectionVariables.set(\"Test_category_6\", responseData.id.toString());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"Mach\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with less than max allowed length title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"Test_category_7\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has the required fields - id and title\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist;\r",
															"    pm.expect(responseData.title).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"id is a non-negative integer\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.id).to.be.a('number');\r",
															"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Title is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify that the category ID is stored in the collection variable 'Test_category_7'\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
															"\r",
															"    pm.collectionVariables.set(\"Test_category_7\", responseData.id.toString());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with max allowed length title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"Test_category_8\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response has the required fields - id and title\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist;\r",
															"    pm.expect(responseData.title).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"id is a non-negative integer\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.id).to.be.a('number');\r",
															"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Title is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify that the category ID is stored in the collection variable 'Test_category_8'\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
															"\r",
															"    pm.collectionVariables.set(\"Test_category_8\", responseData.id.toString());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmM\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Category with NOT RU/EN alphabet in title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Only RU/EN alphabet, space and digits allowed, please change your request\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"異体字\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with numbers not in the string format (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Parameter should be a string\");\r",
															"     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": {{$randomInt}}{{$randomInt}}{{$randomInt}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with special symbols in string format in title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Only RU/EN alphabet, space and digits allowed, please change your request\");\r",
															"     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"*&#$@\" \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with empty title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Minimum category length is: 3\");\r",
															"     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with only space in title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"You are not allowed to use spaces only\");\r",
															"     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \" \"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with boolean in title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Only RU/EN alphabet, space and digits allowed, please change your request\");\r",
															"     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": {{$randomBoolean}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with less than min allowed length title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Minimum category length is: 3\");\r",
															"     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"Ma\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Category with more than max allowed length title (as admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Maximum category length is: 100\");\r",
															"     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMM\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Getting categories",
							"item": [
								{
									"name": "Get the list of categories (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response is an array with at least one element\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Each element in the response array has the required fields - id and title\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
													"\r",
													"    responseData.forEach(function (element) {\r",
													"        pm.expect(element).to.be.an('object');\r",
													"        pm.expect(element).to.have.property('id');\r",
													"        pm.expect(element).to.have.property('title');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"id is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
													"    responseData.forEach(function (category) {\r",
													"        pm.expect(category.id).to.be.a('number').and.to.be.at.least(0);\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Title is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('array');\r",
													"    responseData.forEach(function (category) {\r",
													"        pm.expect(category.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
													"    });\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get category by id (as an admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has required fields - id and title\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.title).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Id is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Title is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryId_1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryId_1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Chenging category",
							"item": [
								{
									"name": "Change category (as an admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate id field is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the title field is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title field should not be empty\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate response body fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.all.keys('id', 'title');\r",
													"});\r",
													"\r",
													"\r",
													"var responseData = pm.response.json();\r",
													"var title = responseData.title;\r",
													"pm.collectionVariables.set(\"title_category_1\", title);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{categoryId_1}}\",\r\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}} {{$randomAlphaNumeric}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Checking that the category has been changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"const courseTitle = pm.collectionVariables.get(\"title_category_1\");\r",
													"\r",
													"pm.test(\"Title is as expected\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(courseTitle)\r",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryId_1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryId_1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Deleting category",
							"item": [
								{
									"name": "Remove category by id (as an admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the 'result' field\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryId_1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryId_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Checking that the category has been deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Course with id {{categoryId_1}} is not in the list\", function () {\r",
													"    var categories = pm.response.json();\r",
													"    categories.forEach(function (category) {\r",
													"        pm.expect(category.id).to.not.equal(\"{{categoryId_1}}\");\r",
													"    });\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test category 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the 'result' field\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{Test_category_1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{Test_category_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test category 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the 'result' field\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{Test_category_2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{Test_category_2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test category 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the 'result' field\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{Test_category_3}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{Test_category_3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test category 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the 'result' field\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{Test_category_4}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{Test_category_4}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test category 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the 'result' field\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{Test_category_5}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{Test_category_5}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test category 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the 'result' field\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{Test_category_6}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{Test_category_6}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test category 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the 'result' field\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{Test_category_7}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{Test_category_7}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test category 8",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the 'result' field\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{Test_category_8}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{Test_category_8}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Course",
					"item": [
						{
							"name": "Get the list of courses (as an admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"\r",
											"    responseData.forEach(function (course) {\r",
											"        pm.expect(course.id).to.be.a('number').and.to.be.at.least(0, \"id should be a non-negative integer\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function (course) {\r",
											"        pm.expect(course.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_admin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "TEACHER Endpoints testing",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create a teacher",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Username_teacher\", pm.variables.replaceIn(\"{{$randomUserName}}\"));\r",
											"pm.collectionVariables.set(\"Password_teacher\", pm.variables.replaceIn(\"{{$randomPassword}}\"));\r",
											"pm.collectionVariables.set(\"FirstName_teacher\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
											"pm.collectionVariables.set(\"LastName_teacher\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
											"pm.collectionVariables.set(\"Email_teacher\", pm.variables.replaceIn(\"{{$randomEmail}}\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check, that status code is 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"const requestBody = JSON.parse(pm.request.body.raw);",
											"const responseJson = pm.response.json();",
											"",
											"// Check if the username in the request matches the username in the response",
											"pm.test(\"Username is the same in request and response\", function () {",
											"    pm.expect(requestBody.username).to.equal(responseJson.username);",
											"});",
											"",
											"// Check if the first name in the request matches the first name in the response",
											"pm.test(\"First Name is the same in request and response\", function () {",
											"    pm.expect(requestBody.firstName).to.equal(responseJson.firstName);",
											"});",
											"",
											"// Check if the last name in the request matches the last name in the response",
											"pm.test(\"Last Name is the same in request and response\", function () {",
											"    pm.expect(requestBody.lastName).to.equal(responseJson.lastName);",
											"});",
											"",
											"// Check if the email in the request matches the email in the response",
											"pm.test(\"Email is the same in request and response\", function () {",
											"    pm.expect(requestBody.email).to.equal(responseJson.email);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{Username_teacher}}\",\r\n    \"firstName\": \"{{FirstName_teacher}}\",\r\n    \"lastName\": \"{{LastName_teacher}}\",\r\n    \"email\": \"{{Email_teacher}}\",\r\n    \"password\": \"{{Password_teacher}}\",\r\n    \"role\": \"teacher\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Sign into the app (teacher)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"AccessToken_teacher\", responseJson.accessToken);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required field - accessToken\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"accessToken is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify AccessToken_teacher collection variable\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.accessToken).to.exist;\r",
											"    pm.expect(pm.variables.get(\"AccessToken_teacher\")).to.equal(responseData.accessToken);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{Username_teacher}}\",\r\n  \"password\": \"{{Password_teacher}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get the list of categories (as a teacher)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each object in the array has the required fields - id and title\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category).to.have.property('id');\r",
											"        pm.expect(category).to.have.property('title');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category.id).to.be.a('number');\r",
											"        pm.expect(category.id).to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate that the 'title' is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get category by id (as a teacher)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has required fields - id and title\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.title).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.id).to.be.a('number');\r",
											"    pm.expect(responseData.id).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title should be a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{def_categoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{def_categoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create a category (as a teacher)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"The error message is displayed correctly\", function () {\r",
											"     pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
											"     });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to change category (as a teacher)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"The error message is displayed correctly\", function () {\r",
											"     pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
											"     });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{def_categoryId}},\r\n  \"title\": \"Chan {{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove category by id (as a teacher)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"The error message is displayed correctly\", function () {\r",
											"     pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
											"     });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{def_categoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{def_categoryId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course",
					"item": [
						{
							"name": "Creating a course",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create a course (teacher)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"courseId_1\", responseJson.id);\r",
															"pm.collectionVariables.set(\"title_course_1\", responseJson.title);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"Bas{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"Bas{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Checking that the course has been created",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Id is as expected\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    const expectedData = pm.collectionVariables.get(\"courseId_1\");\r",
															"    \r",
															"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
															"    responseData.forEach(function(material) {\r",
															"        pm.expect(material.courseId).to.equal(expectedData);\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses/mine",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses",
														"mine"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title and description with only RU alphabet and spaces",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_1\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"Язык программированияя\",\r\n\"description\": \"Язык\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title and description with NOT RU/EN alphabet",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_2\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"異字体字体字\",\r\n\"description\": \"体字体\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title and description with numbers in the string format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_3\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n\"description\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title and description with special symbols in string format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_4\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"*?*)&&\",\r\n\"description\": \"*)&_\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title with min allowed length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_5\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description with min allowed length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_6\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title with less than max allowed length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_7\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description with less than max allowed length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_8\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title with max allowed length title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_9\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description with max allowed length title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"const requestBody = JSON.parse(pm.request.body.raw);\r",
															"\r",
															"pm.collectionVariables.set(\"Test_course_10\", responseJson.id);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Title is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
															"});\r",
															"\r",
															"pm.test(\"Description is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
															"});\r",
															"\r",
															"pm.test(\"Category Id is the same in request and response\", function () {\r",
															"    pm.expect(requestBody.categoryId).to.equal(responseJson.categoryId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Title with numbers NOT in the string format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Parameter should be a string\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": {{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}},\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{\",\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description with numbers NOT in the string format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Parameter should be a string\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": {{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}},\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title is empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Minimum course title length is: 3\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"\",\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description is empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Minimum course description length is: 3\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"\",\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title with only space",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Minimum course title length is: 3\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"\",\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description with only space",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Minimum course description length is: 3\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"\",\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title with boolean",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Parameter should be a string\");\r",
															"     });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": {{$randomBoolean}},\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description with boolean",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Parameter should be a string\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": {{$randomBoolean}},\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title with less than min allowed length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Minimum course title length is: 3\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"Ba\",\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description with less than min allowed length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Minimum course description length is: 3\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"Ba\",\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Title with more than max allowed length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Maximum course title length is: 100\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMM\",\r\n\"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Description with more than max allowed length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"The error message is displayed correctly\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(\"Maximum course description length is: 500\");\r",
															"     });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_teacher}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\r\n\"description\": \"MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmMM\",\r\n\"visible\": true,\r\n\"categoryId\": {{categoryId_1}}\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/courses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"courses"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Getting courses",
							"item": [
								{
									"name": "Get created courses (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"const courseId = pm.collectionVariables.get(\"courseId_1\");\r",
													"\r",
													"pm.test(\"The created course id is in the list of courses\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(courseId)\r",
													"    });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/mine",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"mine"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get course by id (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"id is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.be.a('number');\r",
													"    pm.expect(responseData.id).to.be.at.least(0);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Title is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Description is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Visible is a boolean value\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.visible).to.be.a('boolean');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseId_1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseId_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the list of courses (as a teacher)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjExMjgsInJvbGVJZCI6MiwiaWF0IjoxNjkzOTIzNzI4LCJleHAiOjE2OTM5MzA5Mjh9.9wV7Uob3Q4N5537eovzSVqIuro3pRPSIm0YGQINZ8TU",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Changing course",
							"item": [
								{
									"name": "Change a course (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"const requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"pm.test(\"Title is the same in request and response\", function () {\r",
													"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
													"});\r",
													"\r",
													"pm.test(\"Description is the same in request and response\", function () {\r",
													"    pm.expect(requestBody.description).to.equal(responseJson.description);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{courseId_1}}\",\r\n  \"title\": \"Modified 2 R Programming Basic\",\r\n  \"description\": \"Modified 2 Basic course about R\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{def_categoryId}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Checking that the course has changed (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"const courseId = pm.collectionVariables.get(\"courseId_1\");\r",
													"\r",
													"pm.test(\"The created course id is in the list of courses\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(courseId)\r",
													"    });\r",
													"\r",
													"pm.test(\"The title of course is correct in the list of courses\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Modified 2 R Programming Basic\")\r",
													"    });\r",
													"\r",
													"pm.test(\"The description of course is correct in the list of courses\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Modified 2 Basic course about R\")\r",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Course materials",
							"item": [
								{
									"name": "Create course materials (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"const requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"pm.test(\"Title is the same in request and response\", function () {\r",
													"    pm.expect(requestBody.title).to.equal(responseJson.title);\r",
													"});\r",
													"\r",
													"pm.test(\"Data is the same in request and response\", function () {\r",
													"    pm.expect(requestBody.data).to.equal(responseJson.data);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"title\": \"Introductory part of the course\",\r\n\"data\": \"The R language can be used for many interesting tasks.\",\r\n\"order\": 1\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseId_1}}/materials",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseId_1}}",
												"materials"
											]
										}
									},
									"response": []
								},
								{
									"name": "Checking that materials have been created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"The title of data is correct in the list of courses\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Introductory part of the course\")\r",
													"    });\r",
													"\r",
													"\r",
													"pm.test(\"The R language can be used for many interesting tasks.\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Introductory part of the course\")\r",
													"    });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseId_1}}/materials",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseId_1}}",
												"materials"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enrolling the course (negative)",
							"item": [
								{
									"name": "Try to enroll the course (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Forbidden\");\r",
													"});\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"This action is forbidden for role teacher\");\r",
													"     });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseId_1}}/enroll",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseId_1}}",
												"enroll"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Removing course",
							"item": [
								{
									"name": "Remove a course (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseId_1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseId_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Checking that the course has been deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"The error message is displayed correctly\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Unable to find course record(s)\");\r",
													"     });"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{courseId_1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{courseId_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 1 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 2 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 3 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_3}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 4 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_4}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_4}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 5 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_5}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_5}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 6 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_6}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_6}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 7 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_7}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_7}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 8 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_8}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_8}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 9 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_9}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_9}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove test course 10 (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message indicates successful deletion\", function () {\r",
													"     pm.expect(pm.response.text()).to.include(\"Success: record was removed.\");\r",
													"     });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_teacher}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses/{{Test_course_10}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{Test_course_10}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "STUDENT Endpoints testing",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create a student",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Username_student\", pm.variables.replaceIn(\"{{$randomUserName}}\"));\r",
											"pm.collectionVariables.set(\"Password_student\", pm.variables.replaceIn(\"{{$randomPassword}}\"));\r",
											"pm.collectionVariables.set(\"FirstName_student\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
											"pm.collectionVariables.set(\"LastName_student\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
											"pm.collectionVariables.set(\"Email_student\", pm.variables.replaceIn(\"{{$randomEmail}}\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check, that status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Check if the username in the request matches the username in the response\r",
											"pm.test(\"Username is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.username).to.equal(responseJson.username);\r",
											"});\r",
											"\r",
											"// Check if the first name in the request matches the first name in the response\r",
											"pm.test(\"First Name is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.firstName).to.equal(responseJson.firstName);\r",
											"});\r",
											"\r",
											"// Check if the last name in the request matches the last name in the response\r",
											"pm.test(\"Last Name is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.lastName).to.equal(responseJson.lastName);\r",
											"});\r",
											"\r",
											"// Check if the email in the request matches the email in the response\r",
											"pm.test(\"Email is the same in request and response\", function () {\r",
											"    pm.expect(requestBody.email).to.equal(responseJson.email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{Username_student}}\",\r\n    \"firstName\": \"{{FirstName_student}}\",\r\n    \"lastName\": \"{{LastName_student}}\",\r\n    \"email\": \"{{Email_student}}\",\r\n    \"password\": \"{{Password_student}}\",\r\n    \"role\": \"student\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Sign into the app (student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"AccessToken_student\", responseJson.accessToken);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{Username_student}}\",\r\n  \"password\": \"{{Password_student}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get the list of categories (as student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each category object has the required fields - id and title\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category).to.have.property('id').that.is.a('number');\r",
											"        pm.expect(category).to.have.property('title').that.is.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category.id).to.be.a('number').and.to.be.above(-1);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(function (category) {\r",
											"        pm.expect(category.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get category by id (as a student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and title\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.title).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Title is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{def_categoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{def_categoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create a category (as a student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.expect(pm.response.code).to.equal(403);",
											"});",
											"",
											"",
											"pm.test(\"Response has the 'errors' field\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"The errors field has correct massage\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.errors).to.equal(\"This action is forbidden for role student\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to change category (as a student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.expect(pm.response.code).to.equal(403);",
											"});",
											"",
											"",
											"pm.test(\"Response has the 'errors' field\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"The errors field has correct massage\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.errors).to.equal(\"This action is forbidden for role student\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{def_categoryId}},\r\n  \"title\": \"D{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove category by id (as a student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the 'errors' field\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.errors).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The errors field has correct massage\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.errors).to.equal(\"This action is forbidden for role student\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{def_categoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{def_categoryId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course",
					"item": [
						{
							"name": "Get the list of courses (student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const courseId = pm.collectionVariables.get(\"courseId_1\");\r",
											"\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The id of the created course is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(function (course) {\r",
											"        pm.expect(course.id).to.be.a('number').and.to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get course by id (student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.title).to.exist;\r",
											"    pm.expect(responseData.description).to.exist;\r",
											"    pm.expect(responseData.visible).to.exist;\r",
											"    pm.expect(responseData.categoryId).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response title is 'Python with SQL'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.title).to.equal(\"Python with SQL\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response description is 'Course about Python and SQL'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.description).to.equal(\"Course about Python and SQL\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"visible should be a boolean value\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.visible).to.be.a('boolean');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{def_courseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{def_courseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting materials by course id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The title of data is correct in the list of courses\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Introductory part of the course\")\r",
											"    });\r",
											"\r",
											"\r",
											"pm.test(\"The R language can be used for many interesting tasks.\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Introductory part of the course\")\r",
											"    });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_teacher}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{def_courseId}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{def_courseId}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll the course (student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{def_courseId}}/enroll",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{def_courseId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Сhecking that the student is enrolled in the course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const courseId = pm.collectionVariables.get(\"def_courseId\");\r",
											"\r",
											"pm.test(\"The enrolled course id is in the list of courses\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(courseId)\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/mine",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"mine"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create a course (student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.test(\"The error message is displayed correctly\", function () {\r",
											"     pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
											"     });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"title\": \"Test for stud Basic Machine Learning Models\",\r\n\"description\": \"Basic course about machine learning models\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to change a course (student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.test(\"The error message is displayed correctly\", function () {\r",
											"     pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
											"     });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{def_courseId}}\",\r\n  \"title\": \"Modified 7 R Programming Basic\",\r\n  \"description\": \"Modified 7 Basic course about R\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{def_categoryId}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create course materials (student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.test(\"The error message is displayed correctly\", function () {\r",
											"     pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
											"     });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"title\": \"Test for stud Introductory part of the course\",\r\n\"data\": \"Machine learning can be used for a wide range of tasks\",\r\n\"order\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{def_courseId}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{def_courseId}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete a course (student)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.test(\"The error message is displayed correctly\", function () {\r",
											"     pm.expect(pm.response.text()).to.include(\"This action is forbidden for role student\");\r",
											"     });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_student}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{def_courseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{def_courseId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "NO AUTH Endpoints testing",
			"item": [
				{
					"name": "Try to get the list of courses (no auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"The error message is displayed correctly\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"     });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create a course (no auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"The error message is displayed correctly\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"     });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"title\": \"Test for stud Basic Machine Learning Models\",\r\n\"description\": \"Basic course about machine learning models\",\r\n\"visible\": true,\r\n\"categoryId\": {{def_categoryId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to change a course (no auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"The error message is displayed correctly\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"     });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{courseId_1}}\",\r\n  \"title\": \"Modified 7 R Programming Basic\",\r\n  \"description\": \"Modified 7 Basic course about R\",\r\n  \"visible\": true,\r\n  \"categoryId\": \"{{def_categoryId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create course materials (no auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"The error message is displayed correctly\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"     });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"title\": \"Test for stud Introductory part of the course\",\r\n\"data\": \"Machine learning can be used for a wide range of tasks\",\r\n\"order\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses/{{def_courseId}}/materials",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{def_courseId}}",
								"materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to enroll the course (no auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"The error message is displayed correctly\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"     });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses/{{def_courseId}}/enroll",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{def_courseId}}",
								"enroll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to delete a course (no auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"The error message is displayed correctly\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"     });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses/{{def_courseId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{def_courseId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://qa-school-test-api.quantori.academy",
			"type": "string"
		},
		{
			"key": "username",
			"value": "noskoava_lina",
			"type": "string"
		},
		{
			"key": "AccessToken_admin",
			"value": ""
		},
		{
			"key": "Username_teacher",
			"value": ""
		},
		{
			"key": "Password_teacher",
			"value": ""
		},
		{
			"key": "FirstName_teacher",
			"value": ""
		},
		{
			"key": "LastName_teacher",
			"value": ""
		},
		{
			"key": "Email_teacher",
			"value": ""
		},
		{
			"key": "AccessToken_teacher",
			"value": ""
		},
		{
			"key": "Username_student",
			"value": ""
		},
		{
			"key": "Password_student",
			"value": ""
		},
		{
			"key": "FirstName_student",
			"value": ""
		},
		{
			"key": "LastName_student",
			"value": ""
		},
		{
			"key": "Email_student",
			"value": ""
		},
		{
			"key": "AccessToken_student",
			"value": ""
		},
		{
			"key": "def_categoryId",
			"value": "5262"
		},
		{
			"key": "def_courseId",
			"value": "9570"
		},
		{
			"key": "categoryId_1",
			"value": ""
		},
		{
			"key": "courseId_1",
			"value": ""
		},
		{
			"key": "Test_category_1",
			"value": ""
		},
		{
			"key": "Test_category_2",
			"value": ""
		},
		{
			"key": "Test_category_3",
			"value": ""
		},
		{
			"key": "Test_category_4",
			"value": ""
		},
		{
			"key": "Test_category_5",
			"value": ""
		},
		{
			"key": "Test_category_6",
			"value": ""
		},
		{
			"key": "Test_category_7",
			"value": ""
		},
		{
			"key": "Test_category_8",
			"value": ""
		},
		{
			"key": "Test_course_1",
			"value": ""
		},
		{
			"key": "Test_course_2",
			"value": ""
		},
		{
			"key": "Test_course_3",
			"value": ""
		},
		{
			"key": "Test_course_4",
			"value": ""
		},
		{
			"key": "Test_course_5",
			"value": ""
		},
		{
			"key": "Test_course_6",
			"value": ""
		},
		{
			"key": "Test_course_7",
			"value": ""
		},
		{
			"key": "Test_course_8",
			"value": ""
		},
		{
			"key": "Test_course_9",
			"value": ""
		},
		{
			"key": "Test_course_10",
			"value": ""
		},
		{
			"key": "title_course_1",
			"value": ""
		},
		{
			"key": "data_course_1",
			"value": ""
		},
		{
			"key": "title_category_1",
			"value": ""
		}
	]
}